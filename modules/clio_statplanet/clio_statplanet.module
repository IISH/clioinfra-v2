<?php

/*
 * TODO settings in admin/config/clio/visualize:
 *    settings.csv contains list of all country names (for display in country selector)
 *    set vocabulary for topics/indicators
 *    set noflash text
 *    zip or csv
 *    one data file or per topic
 * 
 * TODO use hook from clio_convert to set refresh when dataset file changes.
 * TODO remove config for directory statplanet
 *
 * Careful: Statplanet will look for a file data.csv or data.zip by default!
 * Careful: Use DOS line endings.
 * Statplanet uses ISO ALPHA-3 codes: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3
 */

/**
 * Implements hook_menu().
 */
function clio_statplanet_menu() {
  $items['visualize'] = array(
    'title' => 'Visualize',
    'page callback' => 'clio_statplanet_page',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
  );
  $items['admin/config/clio/visualize'] = array(
    'title' => 'Statplanet',
    'description' => t('Configure Statplanet for Clio Infra'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('clio_statplanet_config_form'),
    'access arguments' => array('administer statplanet'),
  );
  return $items;
}


/**
 * Implements hook_permission().
 */
function clio_statplanet_permission() {
  return array(
    'administer statplanet' => array(
      'title' => t('Administer Clio Statplanet'),
    ),
  );
}


// TODO Add: vocabulary for categories/indicators, flash base path, settings(.csv)
function clio_statplanet_config_form($form, &$form_state) {
  $form = array();
  $form['refresh'] = array(
    '#type' => 'fieldset',
    '#title' => t('Refresh'),
  );
  $form['refresh']['refresh_files'] = array(
    '#type' => 'submit',
    '#value' => t('Refresh Statplanet files'),
    '#submit' => array('clio_statplanet_refresh_submit'),
  );
  $form['size'] = array(
    '#type' => 'fieldset',
    '#title' => t('Canvas size'),
  );
  $form['size']['clio_statplanet_width'] = array(
    '#type'  => 'textfield',
    '#title' => t('Width'),
    '#size' => 4,
    '#description' => t('The width of the flash canvas.'),
    '#default_value' => variable_get('clio_statplanet_width', 940),
  );
  $form['size']['clio_statplanet_height'] = array(
    '#type'  => 'textfield',
    '#title' => t('Height'),
    '#size' => 4,
    '#description' => t('The height of the flash canvas.'),
    '#default_value' => variable_get('clio_statplanet_height', 640),
  );
  $form['clio_statplanet_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Subdirectory'),
    '#default_value' => variable_get('clio_statplanet_path', 'statplanet'),
    '#maxlength' => 255,
    '#description' => t('A subdirectory of the public file directory where Statplanet files will be stored.'), // which files?
    '#after_build' => array('clio_statplanet_check_directory'),
  );
  return system_settings_form($form);
}


function clio_statplanet_refresh_submit(&$form_state) {
  $file = clio_statplanet_create_settings_file();
  $filenames = drupal_basename($file);
  $file = clio_statplanet_create_data_file();
  $filenames .= '<br>' . drupal_basename($file);
  // TODO Only the topics that have content.
  $files = clio_statplanet_create_category_files();
  foreach ($files as $file) {
    $filenames .= '<br>' . drupal_basename($file);
  }
  variable_set('clio_statplanet_refresh', FALSE);
  drupal_set_message(t('Statplanet files refreshed.'));
  drupal_set_message($filenames);
}


/**
 * Checks the existence of the directory specified in $form_element.
 *
 * @param $form_element
 *   The form element containing the name of the directory to check.
 * TODO check ook ctools met ctools subdir.
 */
function clio_statplanet_check_directory($form_element) {
  $directory = $form_element['#value'];
  if (strlen($directory) == 0) {
    return $form_element;
  }
  $directory = variable_get('file_public_path', conf_path() . '/files') . '/' . $directory;

  if (!is_dir($directory) && !drupal_mkdir($directory, NULL, TRUE)) {
    form_set_error($form_element['#parents'][0], t('The directory %directory does not exist and could not be created.', array('%directory' => $directory)));
    watchdog('file system', 'The directory %directory does not exist and could not be created.', array('%directory' => $directory), WATCHDOG_ERROR);
  }
  return $form_element;
}


/*
 * Check if Statplanet flash files are present.
 */
function clio_statplanet_check_statplanet() {
  $datadir = clio_statplanet_get_dir(FALSE);
  $statdir = drupal_get_path('module', 'clio_statplanet') . '/map';

  if (!is_file($statdir . '/StatPlanet.swf') || !is_file($statdir . '/content.swf')) {
    drupal_set_message(t('The Statplanet flash files are not present.'), 'error');
    return;
  }
  // The file content.swf needs to reside in the flash base directory, next to the data files.
  else if (!is_file($datadir . '/content.swf') && !copy($statdir . '/content.swf', $datadir . '/content.swf')) {
    drupal_set_message(t('The Statplanet flash file could not be copied.'), 'error');
    return;
  }
  return TRUE;
}


function clio_statplanet_page($inline = FALSE) {
  if (!clio_statplanet_check_statplanet()) {
    return '';
  }
  $statpath = '/' . drupal_get_path('module', 'clio_statplanet') . '/map';
  $datapath = '/' . clio_statplanet_get_dir(FALSE);

  if (variable_get('clio_statplanet_refresh', TRUE)) {
    $file = clio_statplanet_create_settings_file();
    $file = clio_statplanet_create_data_file();
    $files = clio_statplanet_create_category_files();
    // Now what?
    variable_set('clio_statplanet_refresh', FALSE);
  }
  // TODO Make this a setting.
  if ($inline) {
    $data = clio_statplanet_create_data_file(TRUE);
  }
  else {
//    $data = 'alldata0.csv';
    $data = 'data.csv';
  }
  $noflash = '<a href="http://www.adobe.com/go/getflash">
  	<img src="http://www.adobe.com/images/shared/download_buttons/get_flash_player.gif" alt="Get Adobe Flash player" />
		</a>
		<p>This page requires Flash Player version 9.0.45 or higher.</p>';
  $swf = new SWFObject($statpath . '/StatPlanet.swf');
  $swf->param('allowFullScreen', 'true')
      ->param('type','movie')
      ->param('quality','high')
      ->param('bgcolor','#ffffff')
      ->param('play','true')
      ->param('loop','true')
      ->param('wmode','window')
      ->param('scale','showall')
      ->param('menu','true')
      ->param('devicefont','false')
      ->param('salign','')
      ->param('allowscriptaccess','sameDomain')
      ->param('base', $datapath)
      ->flashVar('settings', $datapath . '/settings.csv')
      ->flashVar('data', $data)
      // ->flashVar('location', $indicator) // open at indicator
      ->height(variable_get('clio_statplanet_height', 640))
      ->width(variable_get('clio_statplanet_width', 940))
      ->noFlash($noflash)
      ->minimumVersion('9.0.45');
  return theme('swfembed_embed', array('swf' => $swf));
}


/*
 * Dynamically create CSV settings file.
 *
 * @return
 *   A path to the settings file.
 */
function clio_statplanet_create_settings_file() {
  $statdir = drupal_get_path('module', 'clio_statplanet') . '/map';
  $data = file_get_contents($statdir . '/settings-base.csv'); // OR error
  // Use DOS line endings.
  $rowseparator = "\r\n";
  $enclosure = '"';
  $data .= 'NAMES';  
  // TODO Combine this into one function.
  $countries = clio_get_countries();
  uasort($countries, 'clio_statplanet_cmp');
  foreach ($countries as $id => $country) {
    if (!empty($country['code'])) {
      $name = iconv("UTF-8", "ISO-8859-1", $country['name']);
//      $data .= $rowseparator . $enclosure . $name . $enclosure;
      $data .= $rowseparator . preg_replace('/,/', '', $name);
    }
  }
    
  $destination = clio_statplanet_get_dir() . '/settings.csv';
  // TODO On error?
  return file_unmanaged_save_data($data, $destination, FILE_EXISTS_REPLACE);
}


/*
 * Dynamically create data (or CSV file) with links to category files. This should work in Statplanet Plus 3.1 and higher.
 * TODO cache this
 *
 * @return
 *   A string (or path to CSV file) containing the categories and the names of the data files.
 */
function clio_statplanet_create_data_file($inline = FALSE) {
  $topics_vocab = taxonomy_vocabulary_machine_name_load('indicators');
  $topics = taxonomy_get_tree($topics_vocab->vid, 0, 1, TRUE);
  $countries = array_keys(clio_statplanet_get_country_codes());
  $extension = "zip";
  $separator = ",";
  if ($inline) {
    $rowseparator = ";";
    $data = "#". $separator . $rowseparator;
  }
  else {
    // Use DOS line endings.
    $rowseparator = "\r\n";
    $data = '';
  }
  $data .= "CATEGORY". $separator ."YEAR". $separator ."INDICATOR". $separator ."SOURCE". $separator ."DESCRIPTION". $separator ."UNIT". $separator ."MAP". $separator ."GRAPH". $separator ."FILE". $separator ."OPTIONS". $separator ."TYPE";
  foreach ($countries as $code) {
    $data .= $separator . $code;
  }
  foreach ($topics as $topic) {
    $topicname = preg_replace('/,/', '', $topic->name);
    $filename = 'data' . $topic->tid . "." . $extension;
    $data .= $rowseparator;
//    $data .= '"' . $topic->name . '"' . $separator . CLIO_MAX_YEAR . $separator . $separator . '"' . $filename . '"';
    $data .= $topicname . $separator . CLIO_MAX_YEAR . $separator . $separator . $separator . $separator . $separator . $separator . $separator . $filename . $separator . $separator;
    foreach (taxonomy_get_children($topic->tid) as $indicator) {
//      $data .= $rowseparator . $separator . $separator . '"' . $indicator->name . '"' . $separator . "#";
      $data .= $rowseparator . $separator . $separator . $indicator->name . $separator . $separator . $separator . $separator . $separator . $separator . "#" . $separator . $separator ;
    }
  }
  if ($inline) {
    return $data;
  }
  else {
    $destination = clio_statplanet_get_dir() . '/data.csv';
    // TODO On error?
    return file_unmanaged_save_data($data, $destination, FILE_EXISTS_REPLACE);
  }
}


/* 
 * Create the category files, one topic per file. Zip 'em.
 *
 * @param $topics
 *   An array of topic tids.
   * @return
 *   An array of paths to the zipped CSV files.
 */
function clio_statplanet_create_category_files($topics = NULL) {
  global $user;

  if (!$topics) {
    $topics_vocab = taxonomy_vocabulary_machine_name_load('indicators');
    $topics = taxonomy_get_tree($topics_vocab->vid, 0, 1, TRUE);
  }
  $countries = clio_statplanet_get_country_codes();
  // TODO Save years in database?
  $years = range(1500, CLIO_MAX_YEAR);
  rsort($years);
  $tempdir = file_directory_temp();
  $enclosure = '"';
  $files = array();
  foreach ($topics as $topic) {
    // TODO Nicer name?
    $filepath = drupal_tempnam($tempdir, 'stat') . '.csv';
    $filehandle = fopen($filepath, 'w+');
    // Header
    $fields = array_merge(array("CATEGORY", "YEAR", "INDICATOR", "SOURCE", "DESCRIPTION", "UNIT", "MAP", "GRAPH", "FILE", "OPTIONS", "TYPE"), array_keys($countries));
    fputcsv ($filehandle, $fields, CLIO_DELIMITER, $enclosure);
    // Replace Unix by DOS line ending.
    fseek($filehandle, -1, SEEK_CUR);
    fwrite($filehandle, "\r\n"); 

    foreach (taxonomy_get_children($topic->tid) as $indicator) {
      $values[$indicator->tid] = clio_statplanet_get_values($indicator->tid);
    }
    
    $firstline = TRUE;
    foreach ($years as $year) {
      if ($firstline) {
        $topicname = preg_replace('/,/', '', $topic->name);
        $fields = array($topicname, $year); // No empty cells needed?
        $firstline = FALSE;
      }
      else {
        $fields = array('', $year);
      }
      fputcsv ($filehandle, $fields, CLIO_DELIMITER, $enclosure);
      foreach (taxonomy_get_children($topic->tid) as $indicator) {
        $fields = array('', '', $indicator->name, '', '', '', '', '', '', '', '');
        foreach ($countries as $countrycode => $countryid) {
          if (isset($values[$indicator->tid][$year][$countryid])) {
            array_push($fields, $values[$indicator->tid][$year][$countryid]);
          }
          else {
            array_push($fields, '');
          }
        }
        fputcsv ($filehandle, $fields, CLIO_DELIMITER, $enclosure);
        fseek($filehandle, -1, SEEK_CUR);
        fwrite($filehandle, "\r\n"); 
      }
    }
    $files[$topic->tid] = $filepath;
  }

  $datadir = clio_statplanet_get_dir();
  $zipfiles = array();
  foreach ($files as $tid => $path) {
    $zipfile = clio_search_create_zip(array($path));
    $destination = $datadir . '/data' . $tid . '.zip';
    // TODO managed?
    // Move file from temp to public.
    if ($uri = file_unmanaged_move($zipfile->uri, $destination, FILE_EXISTS_REPLACE)) {
      $zipfiles[] = drupal_realpath($uri);
    }
    else {
      drupal_set_message(t('Failed to save ZIP file'), 'error');
      return;
    }
  }
  return $zipfiles;
}


/*
 *
 */
function clio_statplanet_get_values($indicatortid, $years = array(), $countries = array()) {
  $datasetnid = clio_search_get_dataset($indicatortid);
  if ($datasetnid) {
    $resourcenid = clio_search_get_resource($datasetnid);
    if ($resourcenid) {
      $data  = clio_search_db_query($resourcenid, $years, $countries);
      if ($datarow = $data->fetchAssoc()) {
        $values = array();
        // Get unit from first row.
        // $unit = (isset($datarow['unit'])) ? $datarow['unit'] : NULL;
        do {
          if (isset($datarow['value'])) {
            $values[$datarow['year']][$datarow['countrycode']] = $datarow['value'];
          }
        } while ($datarow = $data->fetchAssoc());
        return $values;
      }
    }
  }
}


/*
 * Get a list of all registered countries.
 *
 * @return
 *   An array of alphabetical codes and numerical ids, sorted by country names.
 */
function clio_statplanet_get_country_codes() {
  $countries = clio_get_countries();
  uasort($countries, 'clio_statplanet_cmp');
  $codes = array();
  foreach ($countries as $id => $country) {
    if (!empty($country['code'])) {
      $codes[$country['code']] = $id;
    }
  }
  return $codes;
}


/*
 * Do a natural, case insensitive sort on country names.
 */
function clio_statplanet_cmp($a, $b) {
  return strnatcasecmp($a['name'], $b['name']);
}


/*
 * Get a list of all topics with indicators, table names and Statplanet files.
 */
function clio_statplanet_get_categories() {
  $categories = array();
  $vocab = taxonomy_vocabulary_machine_name_load('indicators');
  $topics = taxonomy_get_tree($vocab->vid, 0, 1);
  foreach ($topics as $topic) {
    $categories[$topic->tid]['name'] = $topic->name;
    $categories[$topic->tid]['refresh'] = TRUE;
    $children = taxonomy_get_children($topic->tid);
    foreach ($children as $child) {
      // $categories[$topic->tid]['indicators'][$child->tid] = $child->name;
      $datasetnid = clio_search_get_dataset($child->tid);
      if ($datasetnid) {
        $resourcenid = clio_search_get_resource($datasetnid);
        if ($resourcenid) {
          // TODO Check if database table exists 
          $tablename = 'feeds_datastore_dkan_file_' . $resourcenid;
          $categories[$topic->tid]['indicators'][$child->tid] = array($tablename, $child->name);
        }
      }
    }
  }
}


/*
 * Get the directory where Statplanet data files are stored.
 */
function clio_statplanet_get_dir($uri = TRUE) {
  $subdir = variable_get('clio_statplanet_path', 'statplanet');
  if ($uri) {
    $dir = 'public://' . $subdir;
  }
  else {
    $dir = variable_get('file_public_path', conf_path() . '/files');
    if ($subdir) {
      $dir .= '/' . $subdir;
    }
  }
  return $dir;
}

